=====================
Module: 0-add_integer
=====================

Numeric Operations
==================

The ``add_integer()`` function computes the sum of two integers or floats.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(1, 2)
    3

    >>> add_integer(100, -2)
    98

    >>> add_integer(2)
    100

    >>> add_integer(100.3, -2)
    98

Non-Numeric Inputs
===================

``add_integer()`` only accepts integers or floats as arguments. It raises
a ``TypeError`` when invalid data types are passed.

::

    >>> add_integer("one", 1)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(1, "one")
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer([1, 1], 1)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(None, 1)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(1, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer(float('inf'), 3)
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(3 + 2j, 4)
    Traceback (most recent call last):
    TypeError: a must be an integer

Argument Count
===============

``add_integer()`` requires at least one argument. It accepts up to two
arguments, ignoring any additional arguments.

::

    >>> add_integer(2)
    100

    >>> add_integer(1, 1, 1)
    Traceback (most recent call last):
    TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

    >>> add_integer()
    Traceback (most recent call last):
    TypeError: add_integer() missing 1 required positional argument: 'a'
